apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: supermanus
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--storage.tsdb.retention.time=30d'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--web.enable-lifecycle'
        - '--web.route-prefix=/'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: supermanus
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        - name: GF_INSTALL_PLUGINS
          value: "redis-datasource,prometheus"
        - name: GF_SERVER_ROOT_URL
          value: "https://monitoring.supermanus.local/grafana"
        - name: GF_SERVER_SERVE_FROM_SUB_PATH
          value: "true"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/provisioning
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-config
        configMap:
          name: grafana-config

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: supermanus
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    name: prometheus

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: supermanus
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    name: grafana

---
# PVCs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: supermanus
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: supermanus
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: supermanus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "supermanus_rules.yml"

    scrape_configs:
      # SuperManUS services
      - job_name: 'mcp-server'
        static_configs:
          - targets: ['mcp-server:8000']
        metrics_path: '/metrics'

      - job_name: 'voice-pipeline'
        static_configs:
          - targets: ['voice-pipeline:8000']
        metrics_path: '/metrics'

      - job_name: 'image-generator'
        static_configs:
          - targets: ['image-generator:8000']
        metrics_path: '/metrics'

      - job_name: 'code-generator'
        static_configs:
          - targets: ['code-generator:8000']
        metrics_path: '/metrics'

      - job_name: 'search-service'
        static_configs:
          - targets: ['search-service:8000']
        metrics_path: '/metrics'

      # Infrastructure
      - job_name: 'redis'
        static_configs:
          - targets: ['redis:6379']

      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres:5432']

      # Kubernetes
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true

  supermanus_rules.yml: |
    groups:
    - name: supermanus_alerts
      rules:
      - alert: ServiceDown
        expr: up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Service {{ $labels.instance }} is down"
          description: "{{ $labels.job }} service has been down for more than 1 minute."

      - alert: HighMemoryUsage
        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage on {{ $labels.instance }}"
          description: "Memory usage is above 90% for more than 5 minutes."

      - alert: CeleryQueueBacklog
        expr: celery_tasks_total{state="PENDING"} > 100
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "Celery queue backlog detected"
          description: "More than 100 pending tasks in Celery queue."

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: supermanus
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus:9090
      access: proxy
      isDefault: true
    - name: Redis
      type: redis-datasource
      url: redis:6379
      access: proxy

  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'supermanus-dashboards'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: supermanus
type: Opaque
data:
  admin-password: c3VwZXJtYW4=  # superman